// Generated by CoffeeScript 1.6.3
(function() {
  var addStyle, createCommand, createElementForm, getInputElementsByTypeAndValue, getPageXY, getPathTo, handler, prev, preventEvent, pseudoGuid, rightClickHandler, showPos;

  pseudoGuid = function() {
    var result;
    result = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx';
    result = result.replace(/[xy]/g, function(re_match) {
      var random_value, replacement;
      random_value = Math.random() * 16 | 0;
      replacement = re_match === 'x' ? random_value : random_value & 0x3 | 0x8;
      return replacement.toString(16);
    });
    return result;
  };

  getInputElementsByTypeAndValue = function(inputType, inputValue) {
    var allDocumentInputElements, inputElement, result, _i, _len;
    allDocumentInputElements = document.getElementsByTagName('input');
    result = new Array();
    for (_i = 0, _len = allDocumentInputElements.length; _i < _len; _i++) {
      inputElement = allDocumentInputElements[_i];
      if (inputElement.type === inputType && inputElement.value === inputValue) {
        result.push(inputElement);
      }
    }
    return result;
  };

  getPathTo = function(element) {
    var ELEMENT_NODE_TYPE, elementTagName, ix, sibling, siblingTagName, siblings, _i, _len;
    elementTagName = element.tagName.toLowerCase();
    if (element.id && document.getElementById(element.id) === element) {
      return "id(\"" + element.id + "\")";
    } else if (element.name && document.getElementsByName(element.name).length === 1) {
      return "//" + elementTagName + "[@name='" + element.name + "']";
    } else if (elementTagName === "input" && getInputElementsByTypeAndValue("submit", element.value).length === 1) {
      /* 
      Avoid using Russian in @value. Allow only English
      Bug #18 - ERROR Object reference not set to an instance of an object.
      */

      if (element.value.match(/^[a-zA-Z0-9 \!\"\#\$\%\&\'\(\)\*\+\,\-\.\/\:\;\<\=\>\?\@\[\\\]\^_\`\{\|\}\~]*$/)) {
        return "input[@type='submit' and @value='" + element.value + "']";
      } else {
        console.log("SWD: Value skipped: " + element.value);
      }
    }
    if (element === document.body) {
      return "/html/" + elementTagName;
    }
    ix = 0;
    siblings = element.parentNode.childNodes;
    ELEMENT_NODE_TYPE = 1;
    for (_i = 0, _len = siblings.length; _i < _len; _i++) {
      sibling = siblings[_i];
      if (sibling.nodeType !== ELEMENT_NODE_TYPE) {
        continue;
      }
      if (sibling === element) {
        return "" + (getPathTo(element.parentNode)) + "/" + elementTagName + "[" + (ix + 1) + "]";
      }
      siblingTagName = sibling.tagName.toLowerCase();
      elementTagName = element.tagName.toLowerCase();
      if (sibling.nodeType === 1 && siblingTagName === elementTagName) {
        ix++;
      }
    }
  };

  getPageXY = function(element) {
    var x, y;
    x = 0;
    y = 0;
    while (element) {
      x += element.offsetLeft;
      y += element.offsetTop;
      element = element.offsetParent;
    }
    return [x, y];
  };

  showPos = function(event, xpath) {
    var el, x, y;
    el = document.getElementById('SwdPR_PopUp');
    if (window.event) {
      x = window.event.clientX + document.documentElement.scrollLeft + document.body.scrollLeft;
      y = window.event.clientY + document.documentElement.scrollTop + document.body.scrollTop;
    } else {
      x = event.clientX + window.scrollX;
      y = event.clientY + window.scrollY;
    }
    x -= 2;
    y -= 2;
    y = y + 15;
    el.style.background = "white";
    el.style.position = "absolute";
    el.style.left = x + "px";
    el.style.top = y + "px";
    el.style.display = "block";
    el.style.border = "3px solid black";
    el.style.padding = "5px 5px 5px 5px";
    el.style.zIndex = 2147483647;
    document.getElementById("SwdPR_PopUp_XPathLocator").innerHTML = xpath;
    document.getElementById("SwdPR_PopUp_ElementText").innerHTML = pseudoGuid();
    document.getElementById("SwdPR_PopUp_CodeIDText").value = '';
    return console.log(x + ";" + y);
  };

  createElementForm = function() {
    var closeClickHandler, element;
    element = document.createElement("div");
    element.id = 'SwdPR_PopUp';
    document.getElementsByTagName('body')[0].appendChild(element);
    closeClickHandler = "document.getElementById('SwdPR_PopUp').style.display = 'none';";
    return element.innerHTML = "<table id=\"SWDTable\">\n    <tr>\n      <td>Code identifier</td>\n      <td>\n            <div id=\"SwdPR_PopUp_Element_Name\">\n                <span id=\"SwdPR_PopUp_CodeID\">\n                    <input type=\"text\" id=\"SwdPR_PopUp_CodeIDText\">\n                </span>\n                <span id=\"SwdPR_PopUp_CodeClose\"></span>\n                <span id=\"SwdPR_PopUp_CloseButton\" onclick=\"" + closeClickHandler + "\">X</span>\n             </div>\n      </td>\n    </tr>\n    <tr>\n      <td>Element</td>\n      <td><span id=\"SwdPR_PopUp_ElementName\">Element</span></td>\n    </tr>\n    <tr>\n      <td>Text:</td>\n      <td><span id=\"SwdPR_PopUp_ElementText\">Element</span></td>\n    </tr>\n    <tr>\n      <td>XPathLocator</td>\n      <td><span id=\"SwdPR_PopUp_XPathLocator\">Element</span></td>\n    </tr>\n    </table>\n<input type=\"button\" value=\"Add element\" onclick=\"window.Swd_addElement()\">";
  };

  window.Swd_addElement = function() {
    var JsonData, XPathLocatorElement, codeIDTextElement;
    codeIDTextElement = document.getElementById("SwdPR_PopUp_CodeIDText");
    XPathLocatorElement = document.getElementById("SwdPR_PopUp_XPathLocator");
    JsonData = {
      "Command": "AddElement",
      "Caller": "addElement",
      "CommandId": pseudoGuid(),
      "ElementCodeName": codeIDTextElement.value,
      "ElementXPath": XPathLocatorElement.firstChild.nodeValue
    };
    return createCommand(JsonData);
  };

  createCommand = function(jsonData) {
    var myJSONText;
    myJSONText = JSON.stringify(jsonData, null, 2);
    return window.swdpr_command = myJSONText;
  };

  addStyle = function(str) {
    var el;
    el = document.createElement('style');
    if (el.styleSheet) {
      el.styleSheet.cssText = str;
    } else {
      el.appendChild(document.createTextNode(str));
    }
    return document.getElementsByTagName('head')[0].appendChild(el);
  };

  preventEvent = function(event) {
    if (event.preventDefault) {
      event.preventDefault();
    }
    event.returnValue = false;
    if (event.stopPropagation) {
      event.stopPropagation();
    } else {
      event.cancelBubble = true;
    }
    return false;
  };

  prev = void 0;

  window.Swd_prevActiveElement = void 0;

  handler = function(event) {
    if (event.target === document.body || (prev && prev === event.target)) {
      return;
    }
    if (prev) {
      prev.className = prev.className.replace(/\bhighlight\b/, '');
      prev = void 0;
    }
    if (event.target && event.ctrlKey) {
      prev = event.target;
      return prev.className += " highlight";
    }
  };

  rightClickHandler = function(event) {
    var JsonData, body, mxy, path, root, target, txy, xpath;
    if (event.ctrlKey) {
      if (event == null) {
        event = window.event;
      }
      target = 'target' in event ? event.target : event.srcElement;
      root = document.compatMode === 'CSS1Compat' ? document.documentElement : document.body;
      mxy = [event.clientX + root.scrollLeft, event.clientY + root.scrollTop];
      path = getPathTo(target);
      txy = getPageXY(target);
      body = document.getElementsByTagName('body')[0];
      xpath = path;
      JsonData = {
        "Command": "GetXPathFromElement",
        "Caller": "EventListener : mousedown",
        "CommandId": pseudoGuid(),
        "XPathValue": xpath
      };
      createCommand(JsonData);
      showPos(event, xpath);
      return preventEvent(event);
    }
  };

  addStyle(".highlight { background-color:silver !important}");

  addStyle("table#SWDTable {             background-color:white;             border-collapse:collapse;           }                       table#SWDTable,table#SWDTable th, table#SWDTable td  {             font-family: Verdana, Arial;             font-size: 10pt;             padding-left:10pt;             padding-right:10pt;             border-bottom: 1px solid black;            }");

  addStyle("input#SwdPR_PopUp_CodeIDText {             display:table-cell;             width:95%;          }");

  addStyle("span#SwdPR_PopUp_CloseButton {              display:table-cell;             width:10px;             border: 2px solid #c2c2c2;             padding: 1px 5px;             top: -20px;             background-color: #980000;             border-radius: 20px;             font-size: 15px;             font-weight: bold;             color: white;text-decoration: none; cursor:pointer;           }");

  addStyle("div#SwdPR_PopUp {             display:none;           }           div#SwdPR_PopUp_Element_Name {             display:table;             width: 100%;           }");

  createElementForm();

  if (document.body.addEventListener) {
    document.body.addEventListener('mouseover', handler, false);
    document.addEventListener('contextmenu', rightClickHandler, false);
  } else if (document.body.attachEvent) {
    document.body.attachEvent('mouseover', function(e) {
      return handler(e || window.event);
    });
    document.body.attachEvent('oncontextmenu', function(e) {
      return rightClickHandler(e || window.event);
    });
  } else {
    document.body.onmouseover = handler;
    document.body.onmouseover = rightClickHandler;
  }

  window.swd_visual_search_injected = "swd_visual_search_injected";

}).call(this);
